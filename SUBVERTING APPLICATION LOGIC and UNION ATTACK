                           Subverting application logic:
 where you can change a query to interfere with the application's logic.




Consider an application that lets users log in with a username and password. If a user submits the username wiener and the password bluecheese, the application checks the credentials by performing the following SQL query:

SELECT * FROM users WHERE username = 'admin' AND password = 'asdfg'
If the query returns the details of a user, then the login is successful. Otherwise, it is rejected.

Here, an attacker can log in as any user without a password simply by using the SQL comment sequence -- to remove the password check from the WHERE clause of the query. For example, submitting the username administrator'-- and a blank password results in the following query:

SELECT * FROM users WHERE username = 'administrator'--' AND password = ''
This query returns the user whose username is administrator and successfully logs the attacker in as that user.

                                                                       UNION attacks:
 where you can retrieve data from different database tables.

Jaba  application SQL injection vulnereble hunxa  tesko query ko result  application response ma return hunxa, ani  UNION keyword use garera hami le  data retrieve garna sakinxa  tables ma  rw  database ma vayeko. yo nai sql injection union attack ho.

The UNION keyword le hamilai 1 ta rw 1 ta vanda badi query select  garera execute garna dinxa ani result chahi original query ma pathauxa.
FOR EXAMPLES :
SELECT a, b FROM table1 UNION SELECT c, d FROM table2    (table 1 batw a,b select garne ani table 2 batw c,d select garne)

Aba yo SQL query  le euta single result 2 ta column batw return garxa, (containing values from columns a and b in table1 and columns c and d in table2.)

Ani  UNION query le kam garna, two key requirements must be met:

The individual queries must return the same number of columns.
The data types in each column must be compatible between the individual queries.
To carry out an SQL injection UNION attack, you need to ensure that your attack meets these two requirements. This generally involves figuring out:


                                                                       Determining the number of columns required in an SQL injection UNION attack
Hamile SQL injection UNION attack perform garda mainly there are two effective methods to determine how many columns are being returned from the original query.

The first method ma hamile ORDER BY series inject gardai jane jaba samma error aauna. 
FOR EXAMPLES :
' ORDER BY 1--
' ORDER BY 2--
' ORDER BY 3--
etc.

 Yo payload ko series le orginal query lai modify garera different column haru ko result lyauna help garxa. 
 The column in an ORDER BY clause can be specified by its index, so you don't need to know the names of any columns. When the specified column index exceeds the number of actual columns in the result set, the database returns an error, such as:

The ORDER BY position number 3 is out of range of the number of items in the select list.
The application might actually return the database error in its HTTP response, or it might return a generic error, or simply return no results. Provided you can detect some difference in the application's response, you can infer how many columns are being returned from the query.

The second method involves submitting a series of UNION SELECT payloads specifying a different number of null values:

' UNION SELECT NULL--
' UNION SELECT NULL,NULL--
' UNION SELECT NULL,NULL,NULL--
etc.
If the number of nulls does not match the number of columns, the database returns an error, such as:

All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.
Again, the application might actually return this error message, or might just return a generic error or no results. 
When the number of nulls matches the number of columns, the database returns an additional row in the result set, containing null values in each column. The effect on the resulting HTTP response depends on the application's code.
 If you are lucky, you will see some additional content within the response, such as an extra row on an HTML table.  
The null values might trigger a different error, such as a NullPointerException. 
the response might be indistinguishable from that which is caused by an incorrect number of nulls, making this method of determining the column count ineffective.


